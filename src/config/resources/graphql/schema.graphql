schema {
  query: Query
  mutation: Mutation
}

type Mutation {
  create(input: AlbumInput!): CreatePayload

  login(username: String!, password: String!): LoginResult
}

"Funktionen, um Albendaten zu lesen"
type Query {
  alben(name: String): [Album!]
  album(id: ID!): Album
}

"Daten zum Kuenstler eines Albums"
type Kuenstler {
  name: String!
  vorname: String!
  alter: Int
}

"Daten zu einem Lied eines Albums"
type Lied {
  name: String!
  dauerInSekunden: Int
}

"Datenschema zu einem Album, das gelesen wird"
type Album {
  id: Int!
  genre: Genre
  kuenstler: Kuenstler!
  name: String!
  titelbild: String!
}

"Enum-Typ für das Genre eines Albums"
enum Genre {
  POP
  RAP
  ROCK
}

"Daten zum Kuenstler eines neuen Album"
input KuenstlerInput {
  name: String!
  vorname: String!
  alter: Int
}

"Daten zu den Liedern eines Albums"
input LiedInput {
  name: String!
  dauerInSekunden: Int
}

"Daten für ein neues Album"
input AlbumInput {
  genre: Genre
  name: String!
  titelbild: String!
  kuenstler: KuenstlerInput!
  lieder: [LiedInput!]
}

type CreatePayload {
  id: Int
}

type LoginResult {
  token: String!
  expiresIn: String!
  roles: [String]!
}
