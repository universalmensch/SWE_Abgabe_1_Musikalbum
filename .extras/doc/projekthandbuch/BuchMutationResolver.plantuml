' Preview durch <Alt>d

@startuml Controller-Klasse

interface Promise<T>

package @nestjs/graphql {
  class "@Resolver" as Resolver
  hide Resolver circle

  class "@UseGuards" as UseGuards
  hide UseGuards circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle

  class "@Mutation" as Mutation
  hide Mutation circle

  class "@Args" as Args
  hide Args circle
}

package security.auth {
  class "type Role = 'ADMIN' | 'MITARBEITER' | 'KUNDE'" as Role
  hide Role circle

  class "@Roles" as Roles
  hide Roles circle

  Roles .right.> Role
}

package buch #DDDDDD {
  package entity #FFFFFF {
    class Buch <<entity>>
  }

  package service #FFFFFF {
    class BuchWriteService << control >>
  }

  class "type BuchDTO = Omit<Buch, 'abbildungen' | 'aktualisiert' | 'erzeugt'" as BuchDTO
  hide BuchDTO circle

    interface IdInput {
        id: number
    }

  class BuchMutationResolver << control >> << @Resolver() >> << @UseGuards() >> << @UseInterceptors() >> {
    + @Mutation() @Roles() async create(@Args() buchDTO: BuchDTO): Promise<number>
    + @Mutation() @Roles() async update(@Args() buchDTO: BuchDTO): Promise<number>
    + @Mutation() @Roles() async delete(@Args() id: IdInput): Promise<boolean>
  }

  BuchMutationResolver o-down-> "1" BuchWriteService : service

  BuchMutationResolver ..> Buch
  BuchMutationResolver ..> BuchDTO
  BuchMutationResolver ..> IdInput
  BuchDTO .up.> Buch
  BuchMutationResolver ..> Promise
  BuchMutationResolver ..> Resolver

  BuchMutationResolver .up.> Roles
  BuchMutationResolver .up.> Role

  BuchDTO .[hidden].> Promise
  BuchDTO .[hidden].> Resolver
}

hide empty members

footer (c) Juergen Zimmermann

@enduml
